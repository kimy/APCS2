import java.util.*;
import java.io.*;

public class Maze{

    private static final String clear =  "\033[2J";
    private static final String hide =  "\033[?25l";
    private static final String show =  "\033[?25h";

    private char[][] maze;
    private int maxx, maxy;
    private int startx, starty;
    private int endx, endy;
    private int[] solution;
    private Coor start, end;
    private int solutionLen;

    private String go(int x,int y){
	return ("\033[" + x + ";" + y + "H");
    }

    public void wait(int millis){
	try{ 
	    Thread.sleep(millis);
	}
	catch(InterruptedException e){
	}

    }

    public String name(){
	return "Kim, Yubin";
    }

    public Maze(String filename){    
	startx = -1;
	starty = -1;   

	String res = "";
	try{
	    Scanner in = new Scanner(new File(filename));
	    while(in.hasNext()){
		String line = in.nextLine();
		if(maxy == 0){
		    maxx = line.length();
		}
		maxy++;
		res += line;
	    }
	}
	catch(Exception e){
	    System.out.println("File: " + filename + " could not be opened");
	    e.printStackTrace();
	    System.exit(0);
	}
	maze = new char[maxy][maxx];

	int index = 0;       
	for (int y = 0; y < maxy; y ++){
	    for (int x = 0; x < maxx; x ++){
		char c = res.charAt(index);
		maze[y][x] = c;
		if (c == 'S'){
		    startx = x;
		    starty = y;
		}
		if (c == 'E'){
		    endx = x;
		    endy = y;
		}
		index++;
	    }
	}
	
    }

    public String toString(){
	String ans = "";
	for(int y = 0; y< maxy; y++){
	    for(int x = 0; x < maxx; x++){
		ans += maze[y][x];
	    }
	    ans += "\n";
	}
	return ans;

    }
   
    public String toString(boolean animate){
	if(animate){
	    return hide + clear + go(0,0) + toString() + show;
	}else{
	    return toString();
	}
    }

    /**Solve the maze using a frontier in a BFS manner. 
     * When animate is true, print the board at each step of the algorithm.
     * Replace spaces with x's as you traverse the maze. 
     */
    public boolean solveBFS(boolean animate){   
	return solve(1, animate);
    }

    /**Solve the maze using a frontier in a DFS manner. 
     * When animate is true, print the board at each step of the algorithm.
     * Replace spaces with x's as you traverse the maze. 
     */
    public boolean solveDFS(boolean animate){   
	return solve(0, animate);
    }

    public boolean solveBest(boolean animate){
	return solve(2, animate);
    }

    public boolean solveAstar(boolean animate){
	return solve(3,animate);
    }

    public boolean solveBFS(){
	return solveBFS(false);
    }
    public boolean solveDFS(){
	return solveDFS(false);
    }

    public boolean solveBest(){
	return solveBest(false);
    }

    public boolean solveAstar(){
	return solveAstar(false);
    }   
   
    public boolean solve(int mode, boolean animate){
	Frontier front = new Frontier(mode, endx, endy);
	Coor start = new Coor(startx, starty);

	if (mode == 0 || mode == 1){
	    front.add(start);
	}

	while(!front.isEmpty()){
	    if (animate){
		wait(20);
		System.out.println(toString(animate));
	    }
	        
	    Coor current = front.remove();
	    int x = current.getX();
	    int y = current.getY();

	    if (maze[y][x] == 'E'){
		end = current;
		Coor e = end;
		while(e != null){
		    solutionLen ++;
		    e = e.getPrevious();
		}

		//System.out.println(solveLen);
		Path();
		addCoordinatestoArray();
		System.out.println(toString());
		return true;


	    }else{
		maze[y][x] = '.';
		Coor[] c = new Coor[]{
		    new Coor(x-1, y),
		    new Coor(x+1, y),
		    new Coor(x, y-1),
		    new Coor(x, y+1),
		};

		for (Coor cor : candidates){
		    cor.setPrevious(current);
		    int Cx = cor.getX();
		    int Cy = cor.getY();

		    if (mode == 0 || mode == 1){
			if (inRange(Cx, Cy) && isValidSpace(Cx, Cy)){
			    front.add(cor);
			}
		    }

		}
	
	    }  
	}
	System.out.println("Cannot be solved");
	return false;
    }


    //helpful booleans!
    public boolean inRange(int x, int y){
	return !(x < 0 || y < 0 || x >= maxx || y >= maxy);
    }

    public boolean isValidSpace(int x, int y){
	return !(maze[y][x] == '#' || maze[y][x] == '.');
    }

    public void Path(){
	Coor e = end;
	while(e != null){
	    int x = e.getX();
	    int y = e.getY();
	    if( x == end.getX() && y == end.getY()){
		maze[y][x] = 'E';
	    }else if(startx == x && starty == y){
		maze[y][x] = 'S';
	    }else{
		maze[y][x] = 'P';
	    }

	    e = e.getPrevious();
	}
        for(int i = 0; i < maxy; i++){
	    for(int j = 0; j < maxx; j++){
		if(maze[i][j] == '.'){
		    maze[i][j] = ' ';
		}
	    }
	}
	
    }
    
    public void addCoordinatestoArray(){
	solution = new int[solutionLen * 2];
	Coor e = end;
	int i = 0;
	while(e != null){
	    solution[i] = e.getX();
	    solution[i+1] = e.getY();
	    i+= 2;
	    e = e.getPrevious();
	}

	solution = blah(solution);
    }

    //reverese solution array because it is backwards
    public int[] blah(int[] ary){
	for(int i = 0; i<ary.length / 2; i++){
	    int temp = ary[i];
	    int swap = ary.length - i - 1;
	    ary[i] = ary[swap];
	    ary[swap] = temp;
	}
	return ary;
    }
    
    /**return an array [x1,y1,x2,y2,x3,y3...]
     *that contains the coordinates of the solution from start to end.
     *Precondition :  solveBFS() OR solveDFS() has already been called (otherwise an empty array is returned)
     *Postcondition:  the correct solution is in the returned array
     */
    public int[] solutionCoordinates(){ 
	return solution;    
    }    

    public static void main(String[]args){
	Maze m = new Maze("data2.dat");
	boolean anim = false;

	if(args.length < 1){
	    System.out.println(" First argument 0(DFS) or 1(BFS) 2nd argmuent//optional// 0(no animation) or 1(animation)");
	}

	if(args.length == 1){
	    if(args[0].equals("0")){
		m.solveDFS(anim);
		System.out.println(Arrays.toString(m.solutionCoordinates()));
	    }
	    if(args[0].equals("1")){
		m.solveBFS(anim);
		System.out.println(Arrays.toString(m.solutionCoordinates()));
	    }
	}else{
	    if(args[1].equals("1")){
		anim = true;
	    }
	    if(args[0].equals("0")){
		m.solveDFS(anim);
		System.out.println(Arrays.toString(m.solutionCoordinates()));
	    }
	    if(args[0].equals("1")){
		m.solveBFS(anim);
		System.out.println(Arrays.toString(m.solutionCoordinates()));
	    }
	}


    }


}